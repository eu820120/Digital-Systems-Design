KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
28Feb2021-17:18:36

 Addr Code

 000                       ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                       ; one second intervals.
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Port definitions
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ;
 000                       CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                       CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
 000                       CONSTANT LED_ADDR_port, 40
 000                       ;**************************************************************************************
 000                       ; Special Register usage
 000                       ;**************************************************************************************
 000                       ;
 000                       ; No registers are given special names in this program.
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Scratch Pad Memory Locations
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                       CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                       CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                       CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                       ;
 000                       CONSTANT SUM, 04                    ;SUM store
 000                       CONSTANT SUM2, 05                   ;SUM store
 000                       CONSTANT COUNT, 06                  ;counter store
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Useful data constants
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                       ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                       ; calculation highly predictable. The '6' in the following equation even allows for
 000                       ; 'CALL delay_1us' instruction in the initiating code.
 000                       ;
 000                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                       ;
 000                       ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                       ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                       ; become lower than intended. Interrupts may effect the timing of software based
 000                       ; delays.
 000                       ;
 000                       CONSTANT delay_1us_constant, 0B
 000                       ;
 000                       ;
 000                       ;
 000                       ; ASCII table
 000                       ;
 000                       CONSTANT character_a, 61
 000                       CONSTANT character_b, 62
 000                       CONSTANT character_c, 63
 000                       CONSTANT character_d, 64
 000                       CONSTANT character_e, 65
 000                       CONSTANT character_f, 66
 000                       CONSTANT character_g, 67
 000                       CONSTANT character_h, 68
 000                       CONSTANT character_i, 69
 000                       CONSTANT character_j, 6A
 000                       CONSTANT character_k, 6B
 000                       CONSTANT character_l, 6C
 000                       CONSTANT character_m, 6D
 000                       CONSTANT character_n, 6E
 000                       CONSTANT character_o, 6F
 000                       CONSTANT character_p, 70
 000                       CONSTANT character_q, 71
 000                       CONSTANT character_r, 72
 000                       CONSTANT character_s, 73
 000                       CONSTANT character_t, 74
 000                       CONSTANT character_u, 75
 000                       CONSTANT character_v, 76
 000                       CONSTANT character_w, 77
 000                       CONSTANT character_x, 78
 000                       CONSTANT character_y, 79
 000                       CONSTANT character_z, 7A
 000                       CONSTANT character_A, 41
 000                       CONSTANT character_B, 42
 000                       CONSTANT character_C, 43
 000                       CONSTANT character_D, 44
 000                       CONSTANT character_E, 45
 000                       CONSTANT character_F, 46
 000                       CONSTANT character_G, 47
 000                       CONSTANT character_H, 48
 000                       CONSTANT character_I, 49
 000                       CONSTANT character_J, 4A
 000                       CONSTANT character_K, 4B
 000                       CONSTANT character_L, 4C
 000                       CONSTANT character_M, 4D
 000                       CONSTANT character_N, 4E
 000                       CONSTANT character_O, 4F
 000                       CONSTANT character_P, 50
 000                       CONSTANT character_Q, 51
 000                       CONSTANT character_R, 52
 000                       CONSTANT character_S, 53
 000                       CONSTANT character_T, 54
 000                       CONSTANT character_U, 55
 000                       CONSTANT character_V, 56
 000                       CONSTANT character_W, 57
 000                       CONSTANT character_X, 58
 000                       CONSTANT character_Y, 59
 000                       CONSTANT character_Z, 5A
 000                       CONSTANT character_0, 30
 000                       CONSTANT character_1, 31
 000                       CONSTANT character_2, 32
 000                       CONSTANT character_3, 33
 000                       CONSTANT character_4, 34
 000                       CONSTANT character_5, 35
 000                       CONSTANT character_6, 36
 000                       CONSTANT character_7, 37
 000                       CONSTANT character_8, 38
 000                       CONSTANT character_9, 39
 000                       CONSTANT character_colon, 3A
 000                       CONSTANT character_stop, 2E
 000                       CONSTANT character_semi_colon, 3B
 000                       CONSTANT character_minus, 2D
 000                       CONSTANT character_divide, 2F       ;'/'
 000                       CONSTANT character_plus, 2B
 000                       CONSTANT character_comma, 2C
 000                       CONSTANT character_less_than, 3C
 000                       CONSTANT character_greater_than, 3E
 000                       CONSTANT character_equals, 3D
 000                       CONSTANT character_space, 20
 000                       CONSTANT character_CR, 0D           ;carriage return
 000                       CONSTANT character_question, 3F     ;'?'
 000                       CONSTANT character_dollar, 24
 000                       CONSTANT character_exclaim, 21      ;'!'
 000                       CONSTANT character_BS, 08           ;Back Space command character
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Initialise the system
 000                       ;**************************************************************************************
 000                       ;
 000  00000    cold_start: LOAD s0, 00
 001  2E004                STORE s0, SUM[04]
 002  2E005                STORE s0, SUM2[05]
 003  2E006                STORE s0, COUNT[06]
 004  2C080                OUTPUT s0, LED_port[80]
 005                       ;
 005  3C001                ENABLE INTERRUPT                    ;enable interrupts
 006                       ;**************************************************************************************
 006                       ; Main program
 006                       ;**************************************************************************************
 006                       ;
 006                       ; Display welcome message for design
 006                       ;
 006  3002A  main_program: CALL delay_1s[02A]
 007  00001                LOAD s0, 01
 008  2C080                OUTPUT s0, LED_port[80]
 009  3002A                CALL delay_1s[02A]
 00A  00000                LOAD s0, 00
 00B  2C080                OUTPUT s0, LED_port[80]
 00C  34006                JUMP main_program[006]
 00D                       ;**************************************************************************************
 00D                       ; Software delay routines
 00D                       ;**************************************************************************************
 00D                       ;
 00D                       ; Delay of 1us.
 00D                       ;
 00D                       ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00D                       ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00D                       ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00D                       ; in the initiating code. Interrupts may effect software derived delays.
 00D                       ;
 00D                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00D                       ;
 00D                       ; Registers used s0
 00D                       ;
 00D  0000B     delay_1us: LOAD s0, delay_1us_constant[0B]
 00E  1C001      wait_1us: SUB s0, 01
 00F  3540E                JUMP NZ, wait_1us[00E]
 010  2A000                RETURN
 011                       ;
 011                       ; Delay of 40us.
 011                       ;
 011                       ; Registers used s0, s1
 011                       ;
 011  00128    delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 012  3000D     wait_40us: CALL delay_1us[00D]
 013  1C101                SUB s1, 01
 014  35412                JUMP NZ, wait_40us[012]
 015  2A000                RETURN
 016                       ;
 016                       ;
 016                       ; Delay of 1ms.
 016                       ;
 016                       ; Registers used s0, s1, s2
 016                       ;
 016  00219     delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 017  30011      wait_1ms: CALL delay_40us[011]
 018  1C201                SUB s2, 01
 019  35417                JUMP NZ, wait_1ms[017]
 01A  2A000                RETURN
 01B                       ;
 01B                       ; Delay of 20ms.
 01B                       ;
 01B                       ; Delay of 20ms used during initialisation.
 01B                       ;
 01B                       ; Registers used s0, s1, s2, s3
 01B                       ;
 01B  00314    delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 01C  30016     wait_20ms: CALL delay_1ms[016]
 01D  1C301                SUB s3, 01
 01E  3541C                JUMP NZ, wait_20ms[01C]
 01F  2A000                RETURN
 020  00364   delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 021  30016    wait_100ms: CALL delay_1ms[016]
 022  1C301                SUB s3, 01
 023  35421                JUMP NZ, wait_100ms[021]
 024  2A000                RETURN
 025  003C8   delay_200ms: LOAD s3, C8                         ;200 x 1ms = 20ms
 026  30016    wait_200ms: CALL delay_1ms[016]
 027  1C301                SUB s3, 01
 028  35426                JUMP NZ, wait_200ms[026]
 029  2A000                RETURN
 02A                       ;
 02A                       ; Delay of approximately 1 second.
 02A                       ;
 02A                       ; Registers used s0, s1, s2, s3, s4
 02A                       ;
 02A  00432      delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 02B  3001B       wait_1s: CALL delay_20ms[01B]
 02C  1C401                SUB s4, 01
 02D  3542B                JUMP NZ, wait_1s[02B]
 02E  2A000                RETURN
 02F                       ;
 02F                       ;
 02F                       ;
 02F                       ;**************************************************************************************
 02F                       ; Interrupt Service Routine (ISR)
 02F                       ;**************************************************************************************
 02F                       ;
 02F                       ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 02F                       ; on the 8 LEDs.
 02F                       ;
 02F  2E000           ISR: STORE s0, ISR_preserve_s0[00]       ;preserve register
 030  2E101                STORE s1, ISR_preserve_s1[01]       ;preserve register
 031  2E202                STORE s2, ISR_preserve_s2[02]       ;preserve register
 032  2E303                STORE s3, ISR_preserve_s3[03]       ;preserve register
 033  0B000                AND s0, s0                          ;clear carry
 034  0F000                XOR s0, s0                          ;clear register, clear zero flag
 035  0B110                AND s1, s1                          ;clear carry
 036  0F110                XOR s1, s1                          ;clear register, clear zero flag
 037  0B220                AND s2, s2                          ;clear carry
 038  0F220                XOR s2, s2                          ;clear register, clear zero flag
 039  0B330                AND s3, s3                          ;clear carry
 03A  0F330                XOR s3, s3                          ;clear register, clear zero flag
 03B  04000                INPUT s0, DATA_IN_PORT[00]          ;get new audio_data
 03C  06104                FETCH s1, SUM[04]                   ;get SUM
 03D  06205                FETCH s2, SUM2[05]                  ;get SUM2 (higher 8 bits)
 03E  06306                FETCH s3, COUNT[06]                 ;get counter (0 to 256)
 03F  14080                COMPARE s0, 80                      ;check if audio_data[7] is 1
 040  35043                JUMP Z, twos_comp[043]
 041  35C43                JUMP NC, twos_comp[043]
 042  34045                JUMP addition[045]
 043  0E0FF     twos_comp: XOR s0, FF                          ;invert
 044  18001                ADD s0, 01                          ;Add 1
 045  19100      addition: ADD s1, s0
 046  1A200                ADDCY s2, 00
 047  143FF      count256: COMPARE s3, FF
 048  3504B                JUMP Z, display_leds[04B]
 049  18301                ADD s3, 01
 04A  34080                JUMP returnn[080]
 04B  20206  display_leds: SL0 s2
 04C  20100                SLA s1
 04D  20206                SL0 s2
 04E  20100                SLA s1
 04F  20206                SL0 s2
 050  20100                SLA s1
 051  20206                SL0 s2
 052  20100                SLA s1
 053  20206                SL0 s2
 054  20100                SLA s1
 055  20206                SL0 s2
 056  20100                SLA s1
 057  20206                SL0 s2
 058  20100                SLA s1
 059  20206                SL0 s2
 05A  20100                SLA s1                              ;left shift 8 times (divide by 256)
 05B  14180          msb8: COMPARE s1, 80                      ;check if s1[7] is one or not
 05C  3585F                JUMP C, msb7[05F]
 05D  001FF                LOAD s1, FF
 05E  3407C                JUMP displayy[07C]
 05F  14140          msb7: COMPARE s1, 40                      ;check if s1[6] is one or not
 060  35863                JUMP C, msb6[063]
 061  001FE                LOAD s1, FE
 062  3407C                JUMP displayy[07C]
 063  14120          msb6: COMPARE s1, 20                      ;check if s1[5] is one or not
 064  35867                JUMP C, msb5[067]
 065  001FC                LOAD s1, FC
 066  3407C                JUMP displayy[07C]
 067  14110          msb5: COMPARE s1, 10                      ;check if s1[4] is one or not
 068  3586B                JUMP C, msb4[06B]
 069  001F8                LOAD s1, F8
 06A  3407C                JUMP displayy[07C]
 06B  14108          msb4: COMPARE s1, 08                      ;check if s1[3] is one or not
 06C  3586F                JUMP C, msb3[06F]
 06D  001F0                LOAD s1, F0
 06E  3407C                JUMP displayy[07C]
 06F  14104          msb3: COMPARE s1, 04                      ;check if s1[2] is one or not
 070  35873                JUMP C, msb2[073]
 071  001E0                LOAD s1, E0
 072  3407C                JUMP displayy[07C]
 073  14102          msb2: COMPARE s1, 02                      ;check if s1[1] is one or not
 074  35877                JUMP C, msb1[077]
 075  001C0                LOAD s1, C0
 076  3407C                JUMP displayy[07C]
 077  14101          msb1: COMPARE s1, 01                      ;check if s1[0] is one or not
 078  3587B                JUMP C, msb0[07B]
 079  00180                LOAD s1, 80
 07A  3407C                JUMP displayy[07C]
 07B  00100          msb0: LOAD s1, 00
 07C  2C140      displayy: OUTPUT s1, LED_ADDR_port[40]        ;display counter value on LEDs
 07D  00100                LOAD s1, 00
 07E  00200                LOAD s2, 00
 07F  00300                LOAD s3, 00                         ;counter goes to zero
 080  2E104       returnn: STORE s1, SUM[04]                   ;store sum
 081  2E205                STORE s2, SUM2[05]                  ;store sum higher bits
 082  2E306                STORE s3, COUNT[06]                 ;store counter
 083  06000                FETCH s0, ISR_preserve_s0[00]       ;restore register
 084  06101                FETCH s1, ISR_preserve_s1[01]       ;restore register
 085  06202                FETCH s2, ISR_preserve_s2[02]       ;restore register
 086  06303                FETCH s3, ISR_preserve_s3[03]       ;restore register
 087  38001                RETURNI ENABLE
 088                       ;
 088                       ;
 088                       ;**************************************************************************************
 088                       ; Interrupt Vector
 088                       ;**************************************************************************************
 088                       ;
 3FF                       ADDRESS 3FF
 3FF  3402F                JUMP ISR[02F]
 3FF                       ;
 3FF                       ;
